.global _start
.global _bss_start
_bss_start:
    .word __bss_start
.global _bss_end
_bss_end:
    .word __bss_end

_start:
    
    ldr pc, =Reset_Handler /*复位中断函数 */
    ldr pc, =Undefine_Handler/* */
    ldr pc, =SVC_Handler
    ldr pc, =PreAbort_Handler
    ldr pc, =DataAbort_Handler
    ldr pc, =NotUse_Handler
    ldr pc, =IRQ_Handler
    ldr pc, =FIQ_handler

/*复位中断服务函数 */
Reset_Handler:

    cpsid i  /*关闭IRQ */
    /*关闭I D cache */
    /*修改SCTLR寄存器，采用读改写 */
    MRC p15,0,r0,c1,c0,0 /*读取SCTLR寄存器到r0 */
    bic r0,r0,#(1 << 12)  //关闭I Cache
    bic r0,r0,#(1 << 11)  //关闭分支预测
    bic r0,r0,#(1<<0)     //关闭D cache
    bic r0,r0,#(1<<1)       //关闭对齐
    bic r0,r0,#(1<<2)       //关闭MMU
    MCR p15,0,r0,c1,c0,0 /*r0写入SCTLR寄存器 */
    ldr r0, = Reset_Handler
    bx r0
    /*中断向量偏移 */
    ldr r0,=0x87800000
    dsb
    isb
    MCR p15,0,r0,c12,c0,0 /*设置VBAR寄存器=0x87800000 */
    dsb
    isb

//清除bss段
    ldr r0,_bss_start
    ldr r1,_bss_end
    mov r2,#0
bss_loop:
    stmia r0!,{r2} //这个指令表示将r2寄存器中的数据依次存储到内存地址r0开始的位置，每存储一个寄存器，r0的地址增加4。
    cmp r0,r1  //比较r0和r1的值
    ble bss_loop //如果r0中的地址小于r1中的地址，继续清除bss段

    /*设置进入IRQ模式 */
    mrs r0,cpsr
    bic r0,r0,#0x1f
    orr r0,r0, #0x12
    msr cpsr,r0 /*将r0写入cpsr，切换到svc模式*/
    ldr sp, =0x80600000 /*设置svc模式下的sp */

    /*设置进入SYS模式 */
    mrs r0,cpsr
    bic r0,r0,#0x1f
    orr r0,r0, #0x1f
    msr cpsr,r0 /*将r0写入cpsr，切换到svc模式*/
    ldr sp, =0x80400000 /*设置svc模式下的sp */

    
    /*设置进入SVC模式 */
    mrs r0,cpsr
    bic r0,r0,#0x1f
    orr r0,r0, #0x13
    msr cpsr,r0 /*将r0写入cpsr，切换到svc模式*/
    ldr sp, =0x80200000 /*设置svc模式下的sp */

    cpsie i  /*使能IRQ */
    b main

Undefine_Handler:
    ldr r0, = Undefine_Handler
    bx r0

SVC_Handler:
    ldr r0, = SVC_Handler
    bx r0

PreAbort_Handler:
    ldr r0, = PreAbort_Handler
    bx r0

DataAbort_Handler:
    ldr r0, = DataAbort_Handler
    bx r0

NotUse_Handler:
    ldr r0, = NotUse_Handler
    bx r0

IRQ_Handler:
    ldr r0, = IRQ_Handler

FIQ_handler:
    ldr r0, = FIQ_handler
    bx r0

/*    //清除bss段
    ldr r0,_bss_start
    ldr r1,_bss_end
    mov r2,#0
bss_loop:
    stmia r0!,{r2} //这个指令表示将r2寄存器中的数据依次存储到内存地址r0开始的位置，每存储一个寄存器，r0的地址增加4。
    cmp r0,r1  //比较r0和r1的值
    ble bss_loop //如果r0中的地址小于r1中的地址，继续清除bss段 */